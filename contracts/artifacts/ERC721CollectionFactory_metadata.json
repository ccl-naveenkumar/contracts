{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_baseURI",
						"type": "string"
					},
					{
						"internalType": "contract IERC721Collection",
						"name": "_erc721Collection",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_oldAllowed",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_newAllowed",
						"type": "address"
					}
				],
				"name": "Allowed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_oldBaseURI",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_newBaseURI",
						"type": "string"
					}
				],
				"name": "BaseURI",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_optionId",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "baseURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_optionId",
						"type": "uint256"
					}
				],
				"name": "canMint",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "erc721Collection",
				"outputs": [
					{
						"internalType": "contract IERC721Collection",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_optionId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_toAddress",
						"type": "address"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numOptions",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_baseURI",
						"type": "string"
					}
				],
				"name": "setBaseURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "supportsFactoryInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_optionId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"balanceOf(uint256)": {
					"details": "Returns an URI for a given option ID. Throws if the option ID does not exist. May return an empty string.",
					"params": {
						"_optionId": "- uint256 ID of the token queried"
					},
					"returns": {
						"_0": "token URI"
					}
				},
				"canMint(uint256)": {
					"details": "Returns whether the option ID can be minted. Can return false if the developer wishes to restrict a total supply per option ID (or overall).",
					"params": {
						"_optionId": "the option id"
					},
					"returns": {
						"_0": "whether an option can be minted"
					}
				},
				"constructor": {
					"details": "Constructor of the contract.",
					"params": {
						"_baseURI": "- base URI for token URIs",
						"_erc721Collection": "- Address of the collection",
						"_name": "- name of the contract",
						"_symbol": "- symbol of the contract"
					}
				},
				"mint(uint256,address)": {
					"details": "Mints asset(s) in accordance to a specific address with a particular \"option\". This should be callable only by the contract owner or the owner's Wyvern Proxy (later universal login will solve this). Options should also be delineated 0 - (numOptions() - 1) for convenient indexing.",
					"params": {
						"_optionId": "the option id",
						"_toAddress": "address of the future owner of the asset(s)"
					}
				},
				"numOptions()": {
					"details": "Return the number of options the factory supports.",
					"returns": {
						"_0": "supported options count"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setBaseURI(string)": {
					"details": "Set Base URI.",
					"params": {
						"_baseURI": "- base URI for token URIs"
					}
				},
				"supportsFactoryInterface()": {
					"details": "Check if support factory interface.",
					"returns": {
						"_0": "always true"
					}
				},
				"tokenURI(uint256)": {
					"details": "Returns an URI for a given option ID. Throws if the option ID does not exist. May return an empty string.",
					"params": {
						"_optionId": "- uint256 ID of the token queried"
					},
					"returns": {
						"_0": "token URI"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": "that 0xa5409ec958c83c3f309868babaca7c86dcb077c1 is the contract address for _proxyRegistryAddress at mainnet.",
				"isApprovedForAll(address,address)": {
					"notice": "Hack to get things to work automatically on OpenSea. Use isApprovedForAll so the frontend doesn't have to worry about different method names."
				},
				"name()": {
					"notice": "Returns the name of this factory."
				},
				"ownerOf(uint256)": {
					"notice": "Hack to get things to work automatically on OpenSea. Use isApprovedForAll so the frontend doesn't have to worry about different method names."
				},
				"symbol()": {
					"notice": "Returns the symbol for this factory."
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Hack to get things to work automatically on OpenSea. Use transferFrom so the frontend doesn't have to worry about different method names."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ERC721CollectionFactory.sol": "ERC721CollectionFactory"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ERC721CollectionFactory.sol": {
			"keccak256": "0x691e34ed2cbf96593e2fe5a77761a9d1fe2f1717b2c084cd31e5ce262874caa2",
			"license": "MIT",
			"urls": [
				"bzz-raw://46e2bc55227ea13c02afb4e1f6d5b47aa47bea426d1120e9c663546c8a1f0d18",
				"dweb:/ipfs/QmWCJ4EWjQfiaU8kBdCnzqUF2gkfAeUcpUbBdFu5AQngWh"
			]
		}
	},
	"version": 1
}