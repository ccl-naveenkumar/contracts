{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_members",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_member",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_value",
						"type": "bool"
					}
				],
				"name": "MemberSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "contract ICollectionManager",
						"name": "_collectionManager",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_forwarder",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_collection",
						"type": "address"
					},
					{
						"internalType": "bytes[]",
						"name": "_data",
						"type": "bytes[]"
					}
				],
				"name": "manageCollection",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "members",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_members",
						"type": "address[]"
					},
					{
						"internalType": "bool[]",
						"name": "_values",
						"type": "bool[]"
					}
				],
				"name": "setMembers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_members": "- members to be added at contract creation",
						"_owner": "- owner of the contract"
					}
				},
				"manageCollection(address,address,address,bytes[])": {
					"params": {
						"_collection": "- collection to be managed",
						"_collectionManager": "- collection manager",
						"_data": "- array of calls",
						"_forwarder": "- forwarder contract owner of the collection"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setMembers(address[],bool[])": {
					"params": {
						"_members": "- members to be added",
						"_values": "- whether the members should be added or removed"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Create the contract"
				},
				"manageCollection(address,address,address,bytes[])": {
					"notice": "Manage collection"
				},
				"setMembers(address[],bool[])": {
					"notice": "Set members"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Committee.sol": "Committee"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Committee.sol": {
			"keccak256": "0xd2a3cd16f439139492b245465a1f63bf22b22c6d65f6826418d01ac2ac7b7668",
			"license": "MIT",
			"urls": [
				"bzz-raw://3a21edfdc4dbdd02df950802aa1ffec07cb51630a7cc7817445db0fecfc2b454",
				"dweb:/ipfs/QmS1azuxgkV3pB5RxTjbbzoBT1DYiUSPeZxPvbHN1CCNoV"
			]
		}
	},
	"version": 1
}