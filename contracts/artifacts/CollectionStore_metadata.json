{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "_acceptedToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_feeOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_fee",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract IERC721CollectionV2",
								"name": "collection",
								"type": "address"
							},
							{
								"internalType": "uint256[]",
								"name": "ids",
								"type": "uint256[]"
							},
							{
								"internalType": "uint256[]",
								"name": "prices",
								"type": "uint256[]"
							},
							{
								"internalType": "address[]",
								"name": "beneficiaries",
								"type": "address[]"
							}
						],
						"indexed": false,
						"internalType": "struct CollectionStore.ItemToBuy[]",
						"name": "_itemsToBuy",
						"type": "tuple[]"
					}
				],
				"name": "Bought",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_oldFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_newFee",
						"type": "uint256"
					}
				],
				"name": "SetFee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_oldFeeOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_newFeeOwner",
						"type": "address"
					}
				],
				"name": "SetFeeOwner",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "BASE_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptedToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract IERC721CollectionV2",
								"name": "collection",
								"type": "address"
							},
							{
								"internalType": "uint256[]",
								"name": "ids",
								"type": "uint256[]"
							},
							{
								"internalType": "uint256[]",
								"name": "prices",
								"type": "uint256[]"
							},
							{
								"internalType": "address[]",
								"name": "beneficiaries",
								"type": "address[]"
							}
						],
						"internalType": "struct CollectionStore.ItemToBuy[]",
						"name": "_itemsToBuy",
						"type": "tuple[]"
					}
				],
				"name": "buy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC721CollectionV2",
						"name": "_collection",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_itemId",
						"type": "uint256"
					}
				],
				"name": "getItemBuyData",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newFee",
						"type": "uint256"
					}
				],
				"name": "setFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newFeeOwner",
						"type": "address"
					}
				],
				"name": "setFeeOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"buy((address,uint256[],uint256[],address[])[])": {
					"details": "There is a maximum amount of NFTs that can be issued per call by the block's limit.",
					"params": {
						"_itemsToBuy": "- items to buy"
					}
				},
				"constructor": {
					"params": {
						"_acceptedToken": "- Address of the ERC20 token accepted",
						"_fee": "- fee to charge for each sale",
						"_feeOwner": "- address where fees will be transferred"
					}
				},
				"getItemBuyData(address,uint256)": {
					"params": {
						"_collection": "- collection address",
						"_itemId": "- item id"
					},
					"returns": {
						"_0": "uint256 of the item's price",
						"_1": "address of the item's beneficiary"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setFee(uint256)": {
					"params": {
						"_newFee": "- Fee from 0 to 999,999"
					}
				},
				"setFeeOwner(address)": {
					"params": {
						"_newFeeOwner": "- Address of the new fee owner"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"buy((address,uint256[],uint256[],address[])[])": {
					"notice": "Buy collection's items."
				},
				"constructor": {
					"notice": "Constructor of the contract."
				},
				"getItemBuyData(address,uint256)": {
					"notice": "Get item's price and beneficiary"
				},
				"setFee(uint256)": {
					"notice": "Sets the fee of the contract that's charged to the seller on each sale"
				},
				"setFeeOwner(address)": {
					"notice": "Set a new fee owner."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/CollectionStore.sol": "CollectionStore"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/CollectionStore.sol": {
			"keccak256": "0x30c21527ede128c9b77bf41fcb7f865e927aca4e00418f8f73ea2c006947c539",
			"license": "MIT",
			"urls": [
				"bzz-raw://373289b8fbdc5c2473fc96db3578a8f0e2a402e52b51ce47a60aad6375a666c9",
				"dweb:/ipfs/QmcExnfHQTg6ueCC16RdLoQEzNWPLDJ8bHoxrFf976FU5H"
			]
		}
	},
	"version": 1
}